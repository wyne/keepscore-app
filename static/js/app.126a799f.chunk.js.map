{"version":3,"sources":["src/components/PlayerScore.js","src/components/Rounds.js","src/screens/ScoreBoardScreen.js","src/screens/ConfigureScreen.js","App.js"],"names":["styles","StyleSheet","create","surface","position","width","surfaceAdd","top","bottom","surfaceSubtract","name","color","fontSize","fontWeight","textAlign","score","margin","marginTop","fontVariant","roundScore","opacity","padding","label","roundLabel","PlayerScore","round","totalScore","onScoreChange","View","style","flexGrow","justifyContent","alignContent","backgroundColor","Text","borderRadius","borderWidth","borderColor","alignSelf","TouchableOpacity","onPress","roundButton","paddingHorizontal","scoreEntry","Rounds","scores","currentRound","onRoundChange","navigation","players","Object","keys","length","flexDirection","Feather","EvilIcons","size","map","index","key","left","right","navigate","ScrollView","horizontal","contentContainerStyle","item","player","playerIndex","appContainer","contentStyle","flex","flexWrap","footerStyle","container","paddingTop","Constants","statusBarHeight","ConfigureScreen","stlye","navigator","createStackNavigator","ScoreBoard","screen","palette","useState","setCurrentRound","setScores","reduce","a","b","newScores","cloneDeep","updatePlayerRoundScore","newRound","undefined","forEach","updateRound","navigationOptions","headerShown","Configure","title","headerBackTitle","initialRouteName","defaultNavigationOptions","createAppContainer","alignItems"],"mappings":"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","file":"static/js/app.126a799f.chunk.js","sourcesContent":["import React, { Component, useState } from 'react';\nimport { Text, View, StyleSheet, TouchableOpacity } from 'react-native';\n\nfunction PlayerScore({ name, color, round, totalScore, roundScore, onScoreChange }) {\n    return (\n        <View style={{ flexGrow: 1, justifyContent: 'center', alignContent: 'stretch', backgroundColor: '#' + color }}>\n            <Text style={[styles.name]}>\n                {name}\n            </Text>\n            <View>\n                <Text style={styles.score}>{totalScore}</Text>\n                <View style={{\n                    padding: 5,\n                    borderRadius: 5,\n                    borderWidth: 2,\n                    borderColor: 'white',\n                    alignSelf: 'center',\n                    opacity: 0.7,\n                }}>\n                    <Text style={[styles.score, styles.roundScore]}>{roundScore}</Text>\n                    <Text style={[styles.label, styles.roundLabel]}>Round {round + 1}</Text>\n                </View>\n            </View>\n\n            <TouchableOpacity style={[styles.surface, styles.surfaceAdd]}\n                onPress={() => {\n                    onScoreChange(name, round, roundScore + 1);\n                }}\n            />\n            <TouchableOpacity style={[styles.surface, styles.surfaceSubtract]}\n                onPress={() => {\n                    onScoreChange(name, round, roundScore - 1);\n                }}\n            />\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    surface: {\n        position: 'absolute',\n        width: '100%',\n    },\n    surfaceAdd: {\n        top: 0,\n        bottom: '50%',\n    },\n    surfaceSubtract: {\n        top: '50%',\n        bottom: 0,\n    },\n    name: {\n        color: 'white',\n        fontSize: 50,\n        fontWeight: 'bold',\n        textAlign: 'center',\n    },\n    score: {\n        margin: 2,\n        marginTop: 15,\n        fontSize: 90,\n        fontWeight: 'bold',\n        textAlign: 'center',\n        color: 'white',\n        fontVariant: ['tabular-nums'],\n    },\n    roundScore: {\n        opacity: .7,\n        fontSize: 40,\n        margin: 0,\n        marginTop: 0,\n        padding: 0,\n    },\n    label: {\n        textAlign: 'center',\n        color: 'white',\n    },\n    roundLabel: {\n        opacity: .7,\n        fontVariant: ['tabular-nums'],\n    },\n});\n\nexport default PlayerScore;","import React, { Component, useState } from 'react';\nimport { Text, View, StyleSheet, TouchableOpacity, ScrollView } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { Feather } from '@expo/vector-icons';\nimport { EvilIcons } from '@expo/vector-icons';\n\nfunction Rounds({ scores, currentRound, onRoundChange, navigation }) {\n    const players = Object.keys(scores);\n    const totalRounds = scores[players[0]].length;\n\n    return (\n        <View style={{ flexDirection: 'row', backgroundColor: 'black' }}>\n\n            <TouchableOpacity\n                style={{ justifyContent: 'center', }}\n                onPress={() => { onRoundChange(currentRound - 1); }} >\n                <View><Text>\n                    <Feather name=\"chevron-left\" style={styles.roundButton} color=\"black\" />\n                </Text></View>\n            </TouchableOpacity>\n\n            <View style={{ padding: 10, color: 'white' }}>\n                <Text style={{ color: 'white' }}>\n                    <EvilIcons style={{ color: 'white', textAlign: 'center' }} name=\"gear\" size={24} color=\"black\" />\n                </Text>\n                {players.map((name, index) => (\n                    <Text key={index} style={{ color: 'white' }}>{name}</Text>\n                ))}\n\n                <TouchableOpacity style={{ position: 'absolute', top: 0, left: 0, right: 0, bottom: 0 }}\n                    onPress={() => { navigation.navigate(\"Configure\") }}>\n                </TouchableOpacity>\n            </View>\n\n            <ScrollView horizontal={true} contentContainerStyle={{ flexDirection: 'row' }}>\n\n                {scores[players[0]].map((item, round) => (\n                    <View key={round} style={{ padding: 10 }}>\n                        <Text style={{\n                            color: currentRound == round ? 'red' : 'white',\n                            fontWeight: 'bold',\n                            opacity: .6,\n                            textAlign: 'center',\n                        }}>{round + 1}</Text>\n                        {players.map((player, playerIndex) => (\n                            <Text key={playerIndex} style={styles.scoreEntry}>\n                                {scores[player][round]}\n                            </Text>\n                        ))}\n                    </View>\n                ))}\n            </ScrollView>\n\n            <TouchableOpacity\n                style={{ justifyContent: 'center', }}\n                onPress={() => { onRoundChange(currentRound + 1); }} >\n                <View>\n                    <Feather name=\"chevron-right\" style={styles.roundButton} color=\"black\" />\n                </View>\n            </TouchableOpacity>\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    roundButton: {\n        fontSize: 50,\n        paddingHorizontal: 10,\n        color: 'white',\n    },\n    scoreEntry: {\n        fontVariant: ['tabular-nums'],\n        textAlign: 'center',\n        color: 'white',\n    }\n});\n\nexport default Rounds;","import React, { useState } from 'react';\nimport { Text, View, StyleSheet, Platform, ScrollView, TouchableOpacity } from 'react-native';\nimport Constants from 'expo-constants';\nimport PlayerScore from '../components/PlayerScore'\nimport Rounds from '../components/Rounds';\nimport { cloneDeep } from 'lodash';\n\nexport default function ScoreBoardScreen({ navigation }) {\n    // const palette = [\"7d9cd4\", \"de8383\", \"a4d4a7\", \"c188d1\", \"a4d4a7\", \"c188d1\", \"de8383\"];\n    // https://coolors.co/f4f1de-e07a5f-8f5d5d-3d405b-5f797b-81b29a-babf95-f2cc8f\n    const palette = [\"e07a5f\", \"8f5d5d\", \"3d405b\", \"5f797b\", \"81b29a\", \"babf95\", \"f2cc8f\"]\n\n    const [currentRound, setCurrentRound] = useState(0);\n    const [scores, setScores] = useState({\n        'Player 1': [0],\n        'Player 2': [0],\n        'Player 3': [0],\n        'Player 4': [0],\n        // 'Player 5': [0],\n        // 'Player 6': [0],\n    });\n    const players = Object.keys(scores);\n\n    const updatePlayerRoundScore = (name, round, score) => {\n        const newScores = cloneDeep(scores);\n        newScores[name][round] = score;\n        setScores(newScores);\n    };\n\n    const updateRound = (newRound) => {\n        if (scores[players[0]][newRound] === undefined) {\n            const newScores = cloneDeep(scores);\n            players.forEach((name) => {\n                newScores[name][newRound] = 0;\n            })\n            setScores(newScores);\n        }\n        if (newRound < 0) { return }\n        setCurrentRound(newRound);\n    }\n\n    return (\n        <View style={styles.appContainer}>\n            <View style={styles.contentStyle}>\n                {players.map((item, index) => (\n                    <PlayerScore\n                        name={item}\n                        color={palette[index]}\n                        round={currentRound}\n                        roundScore={scores[item][currentRound] || 0}\n                        totalScore={scores[item].reduce((a, b) => { return (a || 0) + (b || 0); })}\n                        onScoreChange={(name, round, score) => {\n                            updatePlayerRoundScore(name, round, score);\n                        }}\n                        key={index}\n                    />\n                ))}\n            </View>\n            <Rounds\n                style={styles.footerStyle}\n                scores={scores}\n                currentRound={currentRound}\n                navigation={navigation}\n                onRoundChange={newRound => updateRound(newRound)} />\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    appContainer: {\n        // paddingTop: Constants.statusBarHeight,\n        // height: Platform.OS === 'web' ? '100vh' : '100%',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        position: 'absolute',\n    },\n    contentStyle: {\n        flex: 1,\n        flexGrow: 1,\n        flexWrap: 'wrap',\n        alignContent: 'stretch',\n        flexDirection: 'row',\n    },\n    footerStyle: {\n        flex: 1,\n    }\n});\n\n","import React, { Component, useState } from 'react';\nimport { Text, View, StyleSheet, } from 'react-native';\nimport Constants from 'expo-constants';\n\nconst ConfigureScreen = ({ navigation }) => {\n    return (<View stlye={styles.container}>\n        <Text>Configurator Screen</Text>\n    </View>);\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        paddingTop: Constants.statusBarHeight,\n    }\n});\n\nexport default ConfigureScreen;","import { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nimport { createAppContainer } from \"react-navigation\";\nimport { createStackNavigator } from \"react-navigation-stack\";\nimport ScoreBoardScreen from \"./src/screens/ScoreBoardScreen\";\nimport ConfigureScreen from \"./src/screens/ConfigureScreen\";\n\nconst navigator = createStackNavigator(\n  {\n    ScoreBoard: {\n      screen: ScoreBoardScreen,\n      navigationOptions: ({ navigation }) => ({\n        headerShown: false,\n      }),\n    },\n    Configure: {\n      screen: ConfigureScreen,\n      // Optional: Override the `navigationOptions` for the screen\n      navigationOptions: ({ navigation }) => ({\n        title: \"Configure\",\n        headerBackTitle: \"Back\"\n      }),\n    },\n  },\n  {\n    initialRouteName: \"ScoreBoard\",\n    defaultNavigationOptions: {\n      title: \"Home\",\n    },\n  }\n);\n\nexport default createAppContainer(navigator);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n"],"sourceRoot":""}